"use strict";(()=>{var u=class{constructor(){this.boardRows=6;this.boardCols=7}},r=new u,a=[];for(let e=0;e<r.boardCols;e++){let t=[];for(let n=0;n<r.boardRows;n++)t[n]=null;a.push(t)}console.log(a);function y(){let e=[];for(let t=0;t<r.boardCols;t++){let n=[];for(let l=0;l<r.boardRows;l++)n[l]=null;e.push(n)}return e}function f(){return console.log("getBoard was called"),a}function c(e){a=e,console.log("setBoard was called")}function b(){let e=document.getElementById("grid");for(let t=0;t<r.boardRows;t++){let n=document.createElement("div");n.id=`row-${t}`,n.className="row";for(let l=0;l<r.boardCols;l++){let o=document.createElement("div");o.id=`row-${t}-column-${l}`,o.className="column",n.appendChild(o)}e==null||e.appendChild(n)}}var d="nought",m="cross",C="nobody",g;function x(e,t,n,l,o){return l[e][t]!=null||(n==!1&&(l[e][t]=o),console.log(`takeTurn was called with row: ${e}, column: ${t}`)),l}function h(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function $(e){let t=r.boardRows,n=r.boardCols;for(let l=0;l<t;l++)for(let o=0;o<n;o++)if(e[l][o]==e[l][o+1]&&e[l][o+1]==e[l][o+2]&&e[l][o+2]==e[l][o+3]&&e[l][o]!=null)return e[l][o];for(let l=0;l<n;l++){console.log(`checking cols ${l}`);for(let o=0;o<t-3;o++)if(console.log(`checking rows ${o}`),e[o][l]==e[o+1][l]&&e[o+1][l]==e[o+2][l]&&e[o+2][l]==e[o+3][l]&&e[o][l]!=null)return e[o][l]}for(let l=3;l<t;l++)for(let o=0;o<n-3;o++)if(e[l][o]==e[l-1][o+1]&&e[l-1][o+1]==e[l-2][o+2]&&e[l-2][o+2]==e[l-3][o+3]&&e[l][o]!=null)return e[l][o];console.log("checkWinner was called")}function w(){c(y()),g="cross",console.log("resetGame was called")}function p(){return g}function P(e){g=e}function v(){return!1}var E=document.getElementById("winner-name"),T=document.getElementById("winner-display"),I=[d,m,null],k=[d,m,C];b();function G(){for(let e=0;e<r.boardCols;e++)for(let t=0;t<r.boardRows;t++)document.getElementById(`row-${t}-column-${e}`).innerHTML=""}function R(e){console.log("populateHtmlGridWithBoardState was called with",e),G();for(let t=0;t<r.boardCols;t++)for(let n=0;n<r.boardRows;n++){if(!e[n][t])continue;let l=e[n][t]===d?"\u2B55":"\u274C";document.getElementById(`row-${n}-column-${t}`).innerText=l}}function W(e){return Array.isArray(e)&&e.length===r.boardRows}function A(e){function t(l){let o=[];for(let s=0;s<l[0].length;s++){o[s]=[];for(let i=0;i<l.length;i++)o[s][i]=l[i][s]}return o}let n=t(f());return Array.isArray(e)&&n[0].length===r.boardCols&&e.every(function(l){return I.includes(l)})}function N(e,t){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${t},`);let n=x(e,t,v(),f(),p());if(c(n),P(h(p())),!W(n[0])||!n.every(A))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${I}. Actually received: ${JSON.stringify(n)}`;R(n);let l=$(n);if(l){if(typeof l!="string"||!k.includes(l))throw`Expecting "checkWinner" to return null or one of the strings ${k}. Actually received: ${l}`;console.log("there is a winner"),E.innerText=l,T.style.display="block"}}function H(e){w(),E.innerText="",T.style.display="None",G()}for(let e=0;e<r.boardRows;e++)for(let t=0;t<r.boardCols;t++)document.getElementById(`row-${e}-column-${t}`).addEventListener("click",N.bind(null,e,t));var O=document.getElementById("reset-button");O.addEventListener("click",H);w();})();
//# sourceMappingURL=data:application/json;base64,
