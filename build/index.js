"use strict";(()=>{var c=class{constructor(){this.boardRows=6;this.boardCols=7}},r=new c,i=[];for(let e=0;e<r.boardCols;e++){let l=[];for(let t=0;t<r.boardRows;t++)l[t]=null;i.push(l)}console.log(i);function y(){let e=[];for(let l=0;l<r.boardCols;l++){let t=[];for(let n=0;n<r.boardRows;n++)t[n]=null;e.push(t)}return e}function f(){return console.log("getBoard was called"),i}function d(e){i=e,console.log("setBoard was called")}function p(){let e=document.getElementById("grid");for(let l=0;l<r.boardRows;l++){let t=document.createElement("div");t.id=`row-${l}`,t.className="row";for(let n=0;n<r.boardCols;n++){let o=document.createElement("div");o.id=`row-${l}-column-${n}`,o.className="column",t.appendChild(o)}e==null||e.appendChild(t)}}var u="nought",m="cross",C="nobody";var w;function h(e,l,t,n,o){return n[e][l]!=null||(t==!1&&(n[e][l]=o),console.log(`takeTurn was called with row: ${e}, column: ${l}`)),n}function x(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function v(e){for(let o=0;o<r.boardRows;o++){if(e[o].every(s=>s===e[o][0]&&s!==null))return e[o][0];let a=!0;for(let s=0;s<r.boardCols;s++)if(e[s][o]!==e[0][o]||e[s][o]===null){a=!1;break}if(a)return e[0][o]}let l=!0;for(let o=0;o<r.boardRows;o++)if(e[o][o]!==e[0][0]||e[o][o]===null){l=!1;break}if(l)return e[0][0];let t=!0;for(let o=0;o<r.boardRows;o++)if(e[o][r.boardRows-1-o]!==e[0][r.boardRows-1]||e[o][r.boardRows-1-o]===null){t=!1;break}if(t)return e[0][r.boardRows-1];if((o=>o.some(a=>a.some(s=>s===null)))(e)==!1)return"nobody";console.log("checkWinner was called")}function g(){d(y()),w="cross",console.log("resetGame was called")}function b(){return w}function P(e){w=e}function $(){return!1}var R=document.getElementById("winner-name"),E=document.getElementById("winner-display"),T=[u,m,null],k=[u,m,C];p();function G(){for(let e=0;e<r.boardCols;e++)for(let l=0;l<r.boardRows;l++)document.getElementById(`row-${l}-column-${e}`).innerHTML=""}function I(e){console.log("populateHtmlGridWithBoardState was called with",e),G();for(let l=0;l<r.boardCols;l++)for(let t=0;t<r.boardRows;t++){if(!e[t][l])continue;let n=e[t][l]===u?"\u2B55":"\u274C";document.getElementById(`row-${t}-column-${l}`).innerText=n}}function W(e){return Array.isArray(e)&&e.length===r.boardRows}function N(e){function l(n){let o=[];for(let a=0;a<n[0].length;a++){o[a]=[];for(let s=0;s<n.length;s++)o[a][s]=n[s][a]}return o}let t=l(f());return console.log(t),console.log(`transposed array has length of: ${t[0].length}`),console.log(r.boardCols),Array.isArray(e)&&t[0].length===r.boardCols&&e.every(function(n){return T.includes(n)})}function A(e,l){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${l},`);let t=h(e,l,$(),f(),b());if(d(t),P(x(b())),!W(t[0])||!t.every(N))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${T}. Actually received: ${JSON.stringify(t)}`;I(t);let n=v(t);if(n){if(typeof n!="string"||!k.includes(n))throw`Expecting "checkWinner" to return null or one of the strings ${k}. Actually received: ${n}`;R.innerText=n,E.style.display="block"}}function B(e){g(),R.innerText="",E.style.display="None",G()}for(let e=0;e<r.boardRows;e++)for(let l=0;l<r.boardCols;l++)document.getElementById(`row-${e}-column-${l}`).addEventListener("click",A.bind(null,e,l));var V=document.getElementById("reset-button");V.addEventListener("click",B);g();})();
//# sourceMappingURL=data:application/json;base64,
