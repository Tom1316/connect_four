"use strict";(()=>{var u=class{constructor(){this.boardRows=6;this.boardCols=7}},s=new u,i=[];for(let e=0;e<s.boardRows;e++){let t=[];for(let n=0;n<s.boardCols;n++)t[n]=null;i.push(t)}console.log(i);function b(){let e=[];for(let t=0;t<s.boardRows;t++){let n=[];for(let l=0;l<s.boardCols;l++)n[l]=null;e.push(n)}return e}function f(){return console.log("getBoard was called"),i}function a(e){i=e,console.log("setBoard was called")}function C(){let e=document.getElementById("grid");for(let t=0;t<s.boardRows;t++){let n=document.createElement("div");n.id=`row-${t}`,n.className="row";for(let l=0;l<s.boardCols;l++){let o=document.createElement("div");o.id=`row-${t}-column-${l}`,o.className="column",n.appendChild(o)}e==null||e.appendChild(n)}}var c="nought",w="cross",x="nobody",m;function h(e,t,n,l,o){function W(p,A,d){for(let r=s.boardRows-1;r>=0;r--)d[r][p]==null&&(d[r][p]=A);return d}return console.log(`takeTurn was called with row: ${e}, column: ${t}`),!n&&l[0][t]==null&&(l=W(t,o,l)),l}function P(e){return e=="nought"||e==null?e="cross":e="nought",console.log("Switch player called. Current player is",e),e}function v(e){let t=s.boardRows,n=s.boardCols;for(let l=0;l<t;l++)for(let o=0;o<n;o++)if(e[l][o]==e[l][o+1]&&e[l][o+1]==e[l][o+2]&&e[l][o+2]==e[l][o+3]&&e[l][o]!=null)return e[l][o];for(let l=0;l<n;l++)for(let o=0;o<t-3;o++)if(e[o][l]==e[o+1][l]&&e[o+1][l]==e[o+2][l]&&e[o+2][l]==e[o+3][l]&&e[o][l]!=null)return e[o][l];for(let l=3;l<t;l++)for(let o=0;o<n-3;o++)if(e[l][o]==e[l-1][o+1]&&e[l-1][o+1]==e[l-2][o+2]&&e[l-2][o+2]==e[l-3][o+3]&&e[l][o]!=null)return e[l][o];for(let l=0;l<t-3;l++)for(let o=0;o<n;o++)if(e[l][o]==e[l+1][o+1]&&e[l+1][o+1]==e[l+2][o+2]&&e[l+2][o+2]==e[l+3][o+3]&&e[l][o]!=null)return e[l][o];console.log("checkWinner was called")}function y(){a(b()),m="cross",console.log("resetGame was called")}function g(){return m}function $(e){m=e}function E(){return!1}var k=document.getElementById("winner-name"),I=document.getElementById("winner-display"),R=[c,w,null],T=[c,w,x];C();function N(e){let t=[];for(let n=0;n<e[0].length;n++){t[n]=[];for(let l=0;l<e.length;l++)t[n][l]=e[l][n]}return t}function G(){for(let e=0;e<s.boardRows;e++)for(let t=0;t<s.boardCols;t++)document.getElementById(`row-${e}-column-${t}`).innerHTML=""}function H(e){console.log("populateHtmlGridWithBoardState was called with",e),G();for(let t=0;t<s.boardCols;t++)for(let n=0;n<s.boardRows;n++){if(!e[n][t])continue;let l=e[n][t]===c?"\u2B55":"\u274C";document.getElementById(`row-${n}-column-${t}`).innerText=l}}function O(e){return Array.isArray(e)&&e.length===s.boardCols}function S(e){let t=N(f());return Array.isArray(e)&&t[0].length===s.boardRows&&e.every(function(n){return R.includes(n)})}function V(e,t){console.log(`positionClick was called with rowIndex=${e}, columnIndex=${t},`);let n=h(e,t,E(),f(),g());if(a(n),$(P(g())),!O(n[0])||!n.every(S))throw`Expecting "getBoard" to return a 2d array where all values are one of the strings ${R}. Actually received: ${JSON.stringify(n)}`;H(n);let l=v(n);if(l){if(typeof l!="string"||!T.includes(l))throw`Expecting "checkWinner" to return null or one of the strings ${T}. Actually received: ${l}`;console.log("there is a winner"),k.innerText=l,I.style.display="block"}}function L(e){y(),k.innerText="",I.style.display="None",G()}for(let e=0;e<s.boardRows;e++)for(let t=0;t<s.boardCols;t++)document.getElementById(`row-${e}-column-${t}`).addEventListener("click",V.bind(null,e,t));var D=document.getElementById("reset-button");D.addEventListener("click",L);y();})();
//# sourceMappingURL=data:application/json;base64,
